/*
Largest product in a series

Problem 8

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
object Problem8 {


  def main(args: Array[String]): Unit = {
    val number = scala.math.BigDecimal("73167176531330624919225119674426574" +
      "74235534919493496983520312774506326239578318016984801869478851843858" +
      "61560789112949495459501737958331952853208805511125406987471585238630" +
      "50715693290963295227443043557668966489504452445231617318564030987111" +
      "21722383113622298934233803081353362766142828064444866452387493035890" +
      "72962904915604407723907138105158593079608667017242712188399879790879" +
      "22749219016997208880937766572733300105336788122023542180975125454059" +
      "47522435258490771167055601360483958644670632441572215539753697817977" +
      "84617406495514929086256932197846862248283972241375657056057490261407" +
      "97296865241453510047482166370484403199890008895243450658541227588666" +
      "88116427171479924442928230863465674813919123162824586178664583591245" +
      "66529476545682848912883142607690042242190226710556263211111093705442" +
      "17506941658960408071984038509624554443629812309878799272442849091888" +
      "45801561660979191338754992005240636899125607176060588611646710940507" +
      "75410022569831552000559357297257163626956188267042825248360082325753" +
      "0420752963450")

    def productList(listString: String): List[Long] = {
      def auxproductList(listLong: String): Long =
        listLong.slice(0, 13).toList.map(_.toString.toLong).product

      listString match{
        case listShort if (listShort.length < 13) => List()
        case listLong => auxproductList(listLong) +: productList(listLong.tail)
      }
    }

    println(productList(number.toString()).max)

  }
}

